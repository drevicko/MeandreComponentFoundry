<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <script src="$d3API"></script>
    <title>$title</title>
    #set( $thewidth = $Integer.parseInt("${_userMap['width']}") - 100 )
    <style>
      .line {
        stroke-width: 2;
        fill: none;
      }

      .xTicks, .yTicks { stroke: black; }

      line {
        shape-rendering: crispEdges;
      }

      .rule line {
        stroke: #eee;
      }

      .rule line.axis {
        stroke: black;
      }

      .yLabel, .legend { dominant-baseline: central; }

      .legend { font-size: 11pt; }

      .menu {
          width: ${thewidth}px;
          text-align: right;
          padding-right: 20px;
          font-family: Arial;
          font-size: 9pt;
      }

      text {
        font-family: Arial;
        font-size: 9pt;
      }

      .title {
        font-weight: bold;
      }

    </style>
</head>
<body>
    <div class="menu">
      <label>Smoothing Moving Average of</label>
      <select id="menu" onchange="changeSmoothing(parseInt(this.value));">
         <option value="0">0</option>
         <option value="1">1</option>
         <option value="2">2</option>
         <option value="3">3</option>
         <option value="4">4</option>

         <option value="5">5</option>
         <option value="6">6</option>
         <option value="7">7</option>
         <option value="8">8</option>
         <option value="9">9</option>

         <option value="10">10</option>
         <option value="20">20</option>
         <option value="30">30</option>
         <option value="40">40</option>
         <option value="50">50</option>
      </select>
    </div>

    <div id="graph"></div>

<script type="text/javascript">
    var data = $data,
        labels = $labels;

    var lineColors = [ "steelblue", "red", "green", "purple", "black", "cyan" ];

    var w = ${_userMap["width"]},
        h = ${_userMap["height"]},
        marginXL = 50,
        marginXR = 100,
        marginY = 30,
        minX = d3.min(data.map(function(d) { return Math.min.apply(null, d.x); })),
        maxX = d3.max(data.map(function(d) { return Math.max.apply(null, d.x); })),
        maxY = d3.max(data.map(function(d) { return Math.max.apply(null, d.y); })),
        stddevY = d3.max(data.map(function(d) { var stats = statistics(d.y); return stats.mean + 3 * stats.stdev; })),
        mod_maxY = Math.min(maxY, stddevY),
        x = d3.scale.linear().domain([minX, maxX]).range([0 + marginXL, w - marginXR]),
        y = d3.scale.linear().domain([0, mod_maxY]).range([h - marginY, 0 + marginY]);

    var menu = d3.select("#menu").node();
    var smoothing = $smoothing;

    var found = false;
    var opt = null;
    for (var i = 0; i < menu.options.length; i++) {
        var optValue = parseInt(menu.options[i].value);
        if (opt == null && optValue > smoothing)
            opt = menu.options[i];
        if (optValue == smoothing) {
            found = true;
            opt = menu.options[i];
            break;
        }
    }

    if (!found) {
        var newOpt = document.createElement("option");
        newOpt.value = "$smoothing";
        newOpt.text = "$smoothing";
        menu.add(newOpt, opt);
        opt = newOpt;
    }

    opt.selected = true;

    var vis = d3.select("#graph")
        .append("svg:svg")
        .attr("width", w)
        .attr("height", h);

    var g = vis.append("svg:g");

    vis.append("svg:text")
        .classed("title", true)
        .attr("transform", "translate(" + (marginXL + 5) + ",25)")
        .attr("text-anchor", "start")
        .text("$ylabel");

    vis.append("svg:text")
        .classed("title", true)
        .attr("transform", "translate(" + (w-70) + "," + (h-32) + ")")
        .attr("text-anchor", "end")
        .text("$xlabel");

    var rulesX = vis.selectAll("g.ruleX")
        .data(x.ticks(10))
        .enter().append("svg:g")
        .attr("class", "rule");

    rulesX.append("svg:line")
        .attr("class", function(d) { return d != minX ? null : "axis"; })
        .attr("x1", x)
        .attr("x2", x)
        .attr("y1", marginY)
        .attr("y2", h - marginY);

    var rulesY = vis.selectAll("g.ruleY")
        .data(y.ticks(10))
        .enter().append("svg:g")
        .attr("class", "rule");

    rulesY.append("svg:line")
        .attr("class", function(d) { return d ? null : "axis"; })
        .attr("x1", marginXL + 1)
        .attr("x2", w - marginXR)
        .attr("y1", y)
        .attr("y2", y);

    g.selectAll(".xTicks")
        .data(x.ticks(20))
        .enter().append("svg:line")
        .attr("class", "xTicks")
        .attr("x1", function(d) { return x(d); })
        .attr("y1", h - marginY)
        .attr("x2", function(d) { return x(d); })
        .attr("y2", h - marginY + 10);

    g.selectAll(".yTicks")
        .data(y.ticks(10))
        .enter().append("svg:line")
        .attr("class", "yTicks")
        .attr("y1", function(d) { return y(d); })
        .attr("x1", marginXL - 10)
        .attr("y2", function(d) { return y(d); })
        .attr("x2", marginXR);

    g.selectAll(".xLabel")
        .data(x.ticks(10))
        .enter().append("svg:text")
        .attr("class", "xLabel")
        .text(String)
        .attr("x", function(d) { return x(d); })
        .attr("y", h - marginY + 10 + 9)  // 9 is the font size, 10 is the tick mark height
        .attr("text-anchor", "middle")
        .attr("dy", "4");

    g.selectAll(".yLabel")
        .data(y.ticks(10))
        .enter().append("svg:text")
        .attr("class", "yLabel")
        .text(String)
        .attr("x", marginXL - 10)
        .attr("y", function(d) { return y(d); })
        .attr("text-anchor", "end")
        .attr("dx", "-4");

    var line = d3.svg.line()
        .x(function(d) { return x(d[0]); })
        .y(function(d,i) {
            var values = line.arguments[0];
            var start = Math.max(i - smoothing, 0);
            var end = Math.min(i + smoothing + 1, values.length);
            return y(d3.sum(values.slice(start, end), function(e) { return e[1]; }) / (end - start));
        });

    vis.selectAll(".line")
        .data(data)
        .enter().append("svg:path")
        .attr("d", function(d) { return line(d3.zip(d.x, d.y)); })
        .attr("class", "line")
        .attr("stroke", function(d,i) { return lineColors[i % lineColors.length]; });

    vis.selectAll(".legend")
        .data(labels)
        .enter().append("svg:text")
        .text(function(d) { return d; })
        .attr("class", "legend")
        .attr("x", function(d,i) {
            var dataX = self.data[i].x;
            return x(dataX[dataX.length - 1]);
        })
        .attr("y", function(d,i) {
            var dataY = self.data[i].y;
            var start = Math.max(dataY.length - smoothing - 1, 0);
            return y(d3.sum(dataY.slice(start, dataY.length)) / (dataY.length - start));
        })
        .attr("text-anchor", "start")
        .attr("fill", function(d,i) { return lineColors[i % lineColors.length]; })
        .attr("dx", "4");

    function changeSmoothing(newSmoothing) {
        smoothing = newSmoothing;

        vis.selectAll(".line")
          .transition().duration(1000)
          .attr("d", function(d) { return line(d3.zip(d.x, d.y)); });

        vis.selectAll(".legend")
            .transition().duration(1000)
            .attr("y", function(d,i) {
            var dataY = self.data[i].y;
            var start = Math.max(dataY.length - smoothing - 1, 0);
            return y(d3.sum(dataY.slice(start, dataY.length)) / (dataY.length - start));
        });
    }

    function statistics(a){
        var r = { mean: 0, variance: 0, stdev: 0 };
        for (var l = a.length, m, ss, s = 0, i = l; i--; s += a[i]);
        for (m = r.mean = s / l, ss = 0, i = l; i--; ss += Math.pow(a[i] - m, 2));
        r.stdev = Math.sqrt(r.variance = ss / l);
        return r;
    }

</script>
</body>
</html>