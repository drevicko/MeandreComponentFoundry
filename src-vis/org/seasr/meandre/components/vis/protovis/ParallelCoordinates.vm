<html>
  <head>
    <title>$title</title>
    <script type="text/javascript" src="$path"></script>
    <!--
    <script type="text/javascript" src="/public/resources/js/cars.js"></script>
    -->
    
    <script type="text/javascript">
    
      var carsIgnore = [
    {
        "petallength": 1.4,
        "sepalwidth": 3.5,
        "class": "Iris-setosa",
        "sepallength": 5.1,
        "petalwidth": 0.2
    },
    {
        "petallength": 1.4,
        "sepalwidth": 3,
        "class": "Iris-setosa",
        "sepallength": 4.9,
        "petalwidth": 0.2
    },
    {
        "petallength": 1.3,
        "sepalwidth": 3.2,
        "class": "Iris-setosa",
        "sepallength": 4.7,
        "petalwidth": 0.2
    },
    {
        "petallength": 1.5,
        "sepalwidth": 3.1,
        "class": "Iris-setosa",
        "sepallength": 4.6,
        "petalwidth": 0.2
    }

      ];
      
      var cars  = $data;
      
    </script>
    <style type="text/css">
      #fig {
        width: 880px;
        height: 570px;
      }
    </style>

  </head>
  <body><div id="center"><div id="fig">
	<h3>$title
	    #if ($errorMsg) $errorMsg #end
	</h3>
	
    <script type="text/javascript+protovis">

//
// The units and dimensions to visualize, in order.
// don't show the class field ... nothing works then
//
              
/*
var units = {
  "cylinders": {unit: ""},
  "displacement": {unit: " cubic inch"},
  "weight": {unit: " lbs"},
  "horsepower": {unit: " hp"},
  "acceleration": {unit: " (0 to 60mph)"},
  "mpg": {unit: " miles/gallon"},
  "year": {unit: ""}
}
*/


var units = { 
#foreach($e in $unitMap.entrySet())
  "$e.key" : {unit: "$e.value"},
#end
};

      

var dims = pv.keys(units);

/* Sizing and scales. */
var w = 820,
    h = 420,
    fudge = 0.5,
    x = pv.Scale.ordinal(dims).splitFlush(0, w),
    y = pv.dict(dims, function(t) pv.Scale.linear(
        cars.filter(function(d) !isNaN(d[t])),
        function(d) Math.floor(d[t])-fudge,
        function(d) Math.ceil(d[t]) +fudge
        ).range(0, h)),
    c = pv.dict(dims, function(t) pv.Scale.linear(
        cars.filter(function(d) !isNaN(d[t])),
        function(d) Math.floor(d[t])-fudge,
        function(d) Math.ceil(d[t]) +fudge
        ).range("steelblue", "brown"));

/* Interaction state. */
var filter = pv.dict(dims, function(t) {
    return {min: y[t].domain()[0], max: y[t].domain()[1]};
  }), active = "$active"; // was mpg

/* The root panel. */
var vis = new pv.Panel()
    .width(w)
    .height(h)
    .left(30)
    .right(30)
    .top(30)
    .bottom(20);

// Rule per dimension.
rule = vis.add(pv.Rule)
    .data(dims)
    .left(x);

// Dimension label
rule.anchor("top")
    .add(pv.Label)
    .top(-12);

rule.anchor("bottom")
    .add(pv.Label)
    .text(function(d) (y[d].domain()[0] + fudge) + units[d].unit);

rule.anchor("top")
    .add(pv.Label)
    .text(function(d) (y[d].domain()[1] - fudge) + units[d].unit);

// The parallel coordinates display.
vis.add(pv.Panel)
    .data(cars)
    .visible(function(d) dims.every(function(t)
        (d[t] >= filter[t].min) && (d[t] <= filter[t].max)))
  .add(pv.Line)
    .data(dims)
    .left(function(t, d) x(t))
    .bottom(function(t, d) y[t](d[t]))
    .strokeStyle(pv.color("#bbb").alpha(0.5))
    .lineWidth(1);

// The parallel coordinates display.
var change = vis.add(pv.Panel);

change.add(pv.Panel)
    .data(cars)
    .visible(function(d) dims.every(function(t)
        (d[t] >= filter[t].min) && (d[t] <= filter[t].max)))
  .add(pv.Line)
    .data(dims)
    .left(function(t, d) x(t))
    .bottom(function(t, d) y[t](d[t]))
    .strokeStyle(function(t, d) c[active](d[active]))
    .lineWidth(1);

// Updater for slider and resizer.
function update(d) {
  var t = d.dim;
  filter[t].min = Math.max(y[t].domain()[0], y[t].invert(h - d.y - d.dy));
  filter[t].max = Math.min(y[t].domain()[1], y[t].invert(h - d.y));
  active = t;
  change.render();
  return false;
}

// Updater for slider and resizer.
function selectAll(d) {
  if (d.dy < 3) {
    var t = d.dim;
    filter[t].min = Math.max(y[t].domain()[0], y[t].invert(0));
    filter[t].max = Math.min(y[t].domain()[1], y[t].invert(h));
    d.y = 0; d.dy = h;
    active = t;
    change.render();
  }
  return false;
}

/* Handle select and drag */
change.add(pv.Panel)
    .data(dims.map(function(dim) { return {y:0, dy:h, dim:dim}; }))
    .left(function(t) x(t.dim) - 30)
    .width(60)
    .fillStyle("rgba(0,0,0,.001)")
    .cursor("crosshair")
    .event("mousedown", pv.Behavior.select())
    .event("select", update)
    .event("selectend", selectAll)
  .add(pv.Bar)
    .left(25)
    .top(function(d) d.y)
    .width(10)
    .height(function(d) d.dy)
    .fillStyle(function(t) t.dim == active
        ? c[t.dim]((filter[t.dim].max + filter[t.dim].min) / 2)
        : "hsla(0,0,50%,.5)")
    .strokeStyle("white")
    .cursor("move")
    .event("mousedown", pv.Behavior.drag())
    .event("drag", update)
    .event("dragend", update);

vis.render();

    </script>
    
<div class="caption">
Drag and resize the coordinate selection sliders to filter the data in any dimension.
<br/>
</div>

  </div></div>
  </body>
</html>
