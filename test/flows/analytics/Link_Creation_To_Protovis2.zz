#
# Generated by RDF2ZZConverter on Wed May 19 20:31:51 CDT 2010
#
# @name 	Link Creation To Protovis
# @description 	Information extraction is used to extract entities and create links between entities that exist in the same sentence (or within n sentences). We are using the OpenNLP
#              	system to extract the entities from the text in an automated fashion.
#              	The entities and their relationships are then displayed as a link node graph.
# @creator 	admin
# @date 	Wed May 19 17:56:55 CDT 2010
# @rights 	University of Illinois/NCSA Open Source License
# @tags 	protovis, text, opennlp, visualization
# @uri  	http://seasr.org/flows/link-creation-to-protovis/
#

#
# Specify component imports
#
# TODO: Add component import statement(s) here
# Example: import <URL>   (replace 'URL' with the correct location)
#import <file:///Users/lauvil/descriptors/LinkCreationToProtovis.rdf>
#import <file:///Users/lauvil/descriptors/PushText.rdf>
#import <file:///Users/lauvil/descriptors/OpenNLPSentenceTokenizer.rdf>
#import <file:///Users/lauvil/descriptors/OpenNLPNamedEntity.rdf>
#import <file:///Users/lauvil/descriptors/OpenNLPSentenceDetector.rdf>
#import <file:///Users/lauvil/descriptors/UniversalTextExtractor.rdf>
#import <file:///Users/lauvil/descriptors/PrintToConsole.rdf>

#
# Create the component aliases
#
alias <meandre://seasr.org/components/foundry/link-creation-to-protovis> as LINK_CREATION_TO_PROTOVIS
alias <meandre://seasr.org/components/foundry/push-text> as PUSH_TEXT
alias <meandre://seasr.org/components/foundry/opennlp-sentence-tokenizer> as OPENNLP_SENTENCE_TOKENIZER
alias <meandre://seasr.org/components/foundry/opennlp-named-entity> as OPENNLP_NAMED_ENTITY
alias <meandre://seasr.org/components/foundry/opennlp-sentence-detector> as OPENNLP_SENTENCE_DETECTOR
alias <meandre://seasr.org/components/foundry/universal-text-extractor> as UNIVERSAL_TEXT_EXTRACTOR
alias <meandre://seasr.org/components/foundry/print-to-console> as PRINT_TO_CONSOLE

#
# Create the component instances
#
link_creation_to_protovis = LINK_CREATION_TO_PROTOVIS()
opennlp_sentence_detector = OPENNLP_SENTENCE_DETECTOR()
opennlp_named_entity = OPENNLP_NAMED_ENTITY()
print_to_console = PRINT_TO_CONSOLE()
universal_text_extractor = UNIVERSAL_TEXT_EXTRACTOR()
opennlp_sentence_tokenizer = OPENNLP_SENTENCE_TOKENIZER()
push_text = PUSH_TEXT()

#
# Set component properties
#
link_creation_to_protovis._ignore_errors = "false"
link_creation_to_protovis._debug_level = "info"
link_creation_to_protovis.offset = "1"
link_creation_to_protovis.entities = "person,location,date,organization"

opennlp_sentence_detector.openNLPdir = ""
opennlp_sentence_detector._ignore_errors = "false"
opennlp_sentence_detector._debug_level = "info"
opennlp_sentence_detector.language = "english"

opennlp_named_entity.openNLPdir = ""
opennlp_named_entity._ignore_errors = "false"
opennlp_named_entity._debug_level = "info"
opennlp_named_entity.NETypes = "person,location,date,organization"
opennlp_named_entity.ExtendedNETypes = "url"
opennlp_named_entity.language = "english"

print_to_console._ignore_errors = "false"
print_to_console._debug_level = "info"
print_to_console.wrap_stream = "false"

universal_text_extractor._ignore_errors = "false"
universal_text_extractor.connection_timeout = "0"
universal_text_extractor._debug_level = "info"
universal_text_extractor.read_timeout = "0"

opennlp_sentence_tokenizer.openNLPdir = ""
opennlp_sentence_tokenizer._ignore_errors = "false"
opennlp_sentence_tokenizer._debug_level = "info"
opennlp_sentence_tokenizer.language = "english"

push_text._ignore_errors = "false"
push_text.message = "http://docsouth.unc.edu/neh/keckley/keckley.xml"
#push_text.message = "http://www.gutenberg.org/files/22925/22925.txt"
push_text._debug_level = "info"

#
# Create the flow by connecting the components
#
@opennlp_sentence_tokenizer_outputs = opennlp_sentence_tokenizer()
@opennlp_named_entity_outputs = opennlp_named_entity()
@push_text_outputs = push_text()
@universal_text_extractor_outputs = universal_text_extractor()
@link_creation_to_protovis_outputs = link_creation_to_protovis()
@opennlp_sentence_detector_outputs = opennlp_sentence_detector()

opennlp_sentence_tokenizer(sentences: opennlp_sentence_detector_outputs.sentences)
opennlp_named_entity(tokenized_sentences: opennlp_sentence_tokenizer_outputs.tokenized_sentences)
print_to_console(object: link_creation_to_protovis_outputs.json)
universal_text_extractor(location: push_text_outputs.text)
opennlp_sentence_detector(text: universal_text_extractor_outputs.text)
link_creation_to_protovis(
	tuples: opennlp_named_entity_outputs.tuples;
	meta_tuple: opennlp_named_entity_outputs.meta_tuple
)

