#
# Generated by RDF2ZZConverter on Fri Mar 12 19:03:17 CST 2010
#
# @name 	Date Entities To Simile Timeline With Date Filtering
# @description 	Information extraction is used to extract date entities that can be
#              	displayed on a timeline. This allow a researcher to review sentences
#              	that include dates by examining a timeline. We are using the OpenNLP
#              	system to extract the entities from the text in an automated fashion.
#              	The date entities and the sentences they exist in are then displayed in
#              	Simile Timeline.
# @creator 	admin
# @date 	Fri Mar 12 16:43:16 CST 2010
# @rights 	University of Illinois/NCSA Open Source License
# @tags 	filter, text, opennlp, timeline, date, simile, visualization
# @uri  	http://seasr.org/flows/date-entities-to-simile-timeline-with-date-filtering/
#

#
# Specify component imports
#
# TODO: Add component import statement(s) here
# Example: import <URL>   (replace 'URL' with the correct location)

#
# Create the component aliases
#
alias <meandre://seasr.org/components/foundry/fork-x2> as FORK_X2
alias <meandre://seasr.org/components/foundry/date-filter> as DATE_FILTER
alias <meandre://seasr.org/components/foundry/entity-xml-to-simile-xml> as ENTITY_XML_TO_SIMILE_XML
alias <meandre://seasr.org/components/foundry/opennlp-sentence-detector> as OPENNLP_SENTENCE_DETECTOR
alias <meandre://seasr.org/components/foundry/tuple-to-xml> as TUPLE_TO_XML
alias <meandre://seasr.org/components/foundry/universal-text-extractor> as UNIVERSAL_TEXT_EXTRACTOR
alias <meandre://seasr.org/components/foundry/print-to-console> as PRINT_TO_CONSOLE
alias <meandre://seasr.org/components/foundry/xml-to-xml-with-xsl> as XML_TO_XML_WITH_XSL
alias <meandre://seasr.org/components/foundry/push-text> as PUSH_TEXT
alias <meandre://seasr.org/components/foundry/opennlp-sentence-tokenizer> as OPENNLP_SENTENCE_TOKENIZER
alias <meandre://seasr.org/components/foundry/simile-timeline-generator> as SIMILE_TIMELINE_GENERATOR
alias <meandre://seasr.org/components/foundry/opennlp-named-entity> as OPENNLP_NAMED_ENTITY

#
# Create the component instances
#
xml_to_xml_with_xsl = XML_TO_XML_WITH_XSL()
fork_x2 = FORK_X2()
print_to_console = PRINT_TO_CONSOLE()
date_filter = DATE_FILTER()
push_text = PUSH_TEXT()
entity_xml_to_simile_xml = ENTITY_XML_TO_SIMILE_XML()
opennlp_sentence_detector = OPENNLP_SENTENCE_DETECTOR()
fork_x2_2 = FORK_X2()
opennlp_sentence_tokenizer = OPENNLP_SENTENCE_TOKENIZER()
universal_text_extractor = UNIVERSAL_TEXT_EXTRACTOR()
opennlp_named_entity = OPENNLP_NAMED_ENTITY()
simile_timeline_generator = SIMILE_TIMELINE_GENERATOR()
tuple_to_xml = TUPLE_TO_XML()

#
# Set component properties
#
xml_to_xml_with_xsl._ignore_errors = "false"
xml_to_xml_with_xsl._debug_level = "info"

fork_x2.replication_mode = "0"
fork_x2._ignore_errors = "false"
fork_x2.replication_method_name = ""
fork_x2._debug_level = "info"

print_to_console._ignore_errors = "false"
print_to_console._debug_level = "info"
print_to_console.wrap_stream = "false"

date_filter._ignore_errors = "false"
date_filter.min_value = "1600"
date_filter._debug_level = "info"
date_filter.max_value = "1900"

push_text._ignore_errors = "false"
push_text.message = "http://www.gutenberg.org/files/22925/22925.txt"
push_text._debug_level = "info"

entity_xml_to_simile_xml._ignore_errors = "false"
entity_xml_to_simile_xml._debug_level = "info"

opennlp_sentence_detector._ignore_errors = "false"
opennlp_sentence_detector.openNLPdir = ""
opennlp_sentence_detector._debug_level = "info"
opennlp_sentence_detector.language = "english"

fork_x2_2.replication_mode = "0"
fork_x2_2._ignore_errors = "false"
fork_x2_2.replication_method_name = ""
fork_x2_2._debug_level = "info"

opennlp_sentence_tokenizer.openNLPdir = ""
opennlp_sentence_tokenizer._ignore_errors = "false"
opennlp_sentence_tokenizer._debug_level = "info"
opennlp_sentence_tokenizer.language = "english"

universal_text_extractor._ignore_errors = "false"
universal_text_extractor._debug_level = "info"
universal_text_extractor.read_timeout = "0"
universal_text_extractor.connection_timeout = "0"

opennlp_named_entity._ignore_errors = "false"
opennlp_named_entity.openNLPdir = ""
opennlp_named_entity.language = "english"
opennlp_named_entity.ExtendedNETypes = ""
opennlp_named_entity._debug_level = "info"
opennlp_named_entity.NETypes = "date"

simile_timeline_generator._ignore_errors = "false"
simile_timeline_generator.timeline_api_url = ""
simile_timeline_generator._debug_level = "info"

tuple_to_xml._ignore_errors = "false"
tuple_to_xml.encoding = "ISO-8859-1"
tuple_to_xml._debug_level = "info"
tuple_to_xml.entities = "date"

#
# Create the flow by connecting the components
#
@opennlp_sentence_tokenizer_outputs = opennlp_sentence_tokenizer()
@fork_x2_outputs = fork_x2()
@xml_to_xml_with_xsl_outputs = xml_to_xml_with_xsl()
@entity_xml_to_simile_xml_outputs = entity_xml_to_simile_xml()
@simile_timeline_generator_outputs = simile_timeline_generator()
@fork_x2_2_outputs = fork_x2_2()
@tuple_to_xml_outputs = tuple_to_xml()
@opennlp_named_entity_outputs = opennlp_named_entity()
@push_text_outputs = push_text()
@universal_text_extractor_outputs = universal_text_extractor()
@date_filter_outputs = date_filter()
@opennlp_sentence_detector_outputs = opennlp_sentence_detector()

fork_x2(object: opennlp_sentence_tokenizer_outputs.tokenized_sentences)
opennlp_sentence_tokenizer(sentences: opennlp_sentence_detector_outputs.sentences)
entity_xml_to_simile_xml(xml: tuple_to_xml_outputs.xml)
xml_to_xml_with_xsl(
	xsl: date_filter_outputs.xsl;
	xml: entity_xml_to_simile_xml_outputs.xml
)
simile_timeline_generator(
	min_value: date_filter_outputs.min_value;
	max_value: date_filter_outputs.max_value;
	xml: xml_to_xml_with_xsl_outputs.xml
)
fork_x2_2(object: push_text_outputs.text)
opennlp_named_entity(tokenized_sentences: fork_x2_outputs.object)
tuple_to_xml(
	tuples: opennlp_named_entity_outputs.tuples;
	location: fork_x2_2_outputs.object2;
	meta_tuple: opennlp_named_entity_outputs.meta_tuple;
	tokens: fork_x2_outputs.object2
)
print_to_console(
	object: entity_xml_to_simile_xml_outputs.min_value;
	object: entity_xml_to_simile_xml_outputs.max_value
)
universal_text_extractor(location: fork_x2_2_outputs.object)
opennlp_sentence_detector(text: universal_text_extractor_outputs.text)

