#
# Generated by RDF2ZZConverter on Tue May 18 12:46:54 CDT 2010
#
# @name 	CSV Table To JSON
# @description 	This flow loads a delimited data set into a table. The first row has
#              	attribute labels and the second row has attribute types. This flow does
#              	a bottom-up clustering of a simple data set and displays the 'tree'
#              	representation of how the clusters were nested together (called a
#              	Dendrogram).\n\nThe default data set is the 'iris' data set, which
#              	relates basic measurements of flowers to their type. When the flow is
#              	run, you will be prompted for 'input' and 'output' attributes. Select
#              	all measurements (everything but the last attribute) as 'inputs' and
#              	the last attribute, 'class', as an 'output'.\n\nAfter submitting the
#              	Attributes, you should see a red and green visualization of how the
#              	clustering model algorithm grouped the data. Clicking on one of these
#              	segments will bring up the raw data values of records that were put
#              	into that cluster. In general, the smaller clusters lower in the tree
#              	should have less and less diversity of flower class, while the top
#              	cluster will have the entire data set inside (and therefore the most
#              	diversity).\n\nAny numeric data set in a csv format can be processed by
#              	this flow. Simply put the data file's location in the 'Input URL or
#              	Path' prior to executing the flow. For data files on the machine
#              	running the Meandre Infrastructure server, use the syntax:
#              	'file:///myDir/myFile.csv', where the data file is '/myDir/myFile.csv'.
# @creator 	admin
# @date 	Tue May 18 12:42:27 CDT 2010
# @rights 	University of Illinois/NCSA Open Source License
# @tags 	csv, json, reader
# @uri  	http://seasr.org/flows/csv-table-to-json/
#

#
# Specify component imports
#
# TODO: Add component import statement(s) here
# Example: import <URL>   (replace 'URL' with the correct location)

#
# Create the component aliases
#
alias <meandre://seasr.org/components/foundry/table-to-json> as TABLE_TO_JSON
alias <meandre://seasr.org/components/data-mining/basic-table-factory-injector> as BASIC_TABLE_FACTORY_INJECTOR
alias <meandre://seasr.org/components/data-mining/create-delimited-file-parser> as CREATE_DELIMITED_FILE_PARSER
alias <meandre://seasr.org/components/data-mining/input-url-or-path> as INPUT_URL_OR_PATH
alias <meandre://seasr.org/components/data-mining/parse-file-to-table> as PARSE_FILE_TO_TABLE
alias <meandre://seasr.org/components/foundry/print-to-console> as PRINT_TO_CONSOLE

#
# Create the component instances
#
print_to_console = PRINT_TO_CONSOLE()
basic_table_factory_injector = BASIC_TABLE_FACTORY_INJECTOR()
input_url_or_path = INPUT_URL_OR_PATH()
parse_file_to_table = PARSE_FILE_TO_TABLE()
create_delimited_file_parser = CREATE_DELIMITED_FILE_PARSER()
table_to_json = TABLE_TO_JSON()

#
# Set component properties
#
print_to_console.ignore_errors = "false"
print_to_console.debug_level = "info"
print_to_console.wrap_stream = "false"


input_url_or_path.file_url = "http://repository.seasr.org/Datasets/UCI/csv/iris.csv"
input_url_or_path.password = "null"
input_url_or_path.username = "null"

parse_file_to_table.use_blanks = "True"

create_delimited_file_parser.delimiter = "default"
create_delimited_file_parser.typesRowIndex = "1"
create_delimited_file_parser.labelsRowIndex = "0"

table_to_json.ignore_errors = "false"
table_to_json.debug_level = "info"

#
# Create the flow by connecting the components
#
@parse_file_to_table_outputs = parse_file_to_table()
@table_to_json_outputs = table_to_json()
@create_delimited_file_parser_outputs = create_delimited_file_parser()
@basic_table_factory_injector_outputs = basic_table_factory_injector()
@input_url_or_path_outputs = input_url_or_path()

parse_file_to_table(
	parser: create_delimited_file_parser_outputs.parser;
	table_factory: basic_table_factory_injector_outputs.table_factory
)
table_to_json(table: parse_file_to_table_outputs.table)
print_to_console(object: table_to_json_outputs.json)
create_delimited_file_parser(
	webdavClient: input_url_or_path_outputs.webdavClient;
	url: input_url_or_path_outputs.url
)

